<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use Illuminate\Support\Facades\DB;

use Illuminate\Support\Facades\Http;  // Import the Http facade
use Illuminate\Support\Str;
use App\Models\ScrapedData;
use App\Models\DemonstratorResult;

class DataScrapingController extends Controller
{
    public function data_scraping()
    {
        for ($i = 401000001; $i < 401000100; $i++) { 
            $roll = $i;

            // Send POST request
            $response = Http::timeout(60)->asForm()->post('http://ntrca.teletalk.com.bd/result/index.php', [
                'rollno'  => $roll,
                'exam'    => '18:18th:2023:2',
                'yes'     => 'YES',
                'button2' => 'Submit',
            ]);

            // Get the response body
            $data = $response->body();

            // Store only if it contains 'CONGRATULATIONS'
            if (Str::contains($data, 'CONGRATULATIONS')) {
                ScrapedData::updateOrCreate(
                    ['roll_no' => $roll], // Prevent duplicate entries
                    ['core_data' => $data]
                );
            }
        }

        return 'Data scraping completed!';
    }

    public function showScrapedData()
    {
        // Paginate the data instead of getting all at once
        $scrapedData = DB::table('scraped_data')
            ->selectRaw("id, roll_no, TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(core_data, 'Name: ', -1), '<br />', 1)) as name")
            ->paginate(15); // 10 items per page, adjust as needed
    
        return view('scraped_data', compact('scrapedData'));
    }

    public function finalDataScraping()
    {
        // Fetch all roll_no values from the 'bangla' table
      
        $students = DB::table('bangla')->select('roll_no')->get();

        foreach ($students as $student) {
            $roll = $student->roll_no;

            // Send POST request to external site
            $response = Http::timeout(60)->asForm()->post('http://ntrca.teletalk.com.bd/result/index.php', [
                'rollno'  => $roll,
                'exam'    => '18:18th:2023:3', // Change if needed
                'yes'     => 'YES',
                'button2' => 'Submit',
            ]);

            $data = $response->body();

            $finalResult = Str::contains($data, 'CONGRATULATIONS') ? 'passed' : 'failed';

            DB::table('bangla')
                ->where('roll_no', $roll)
                ->update(['final_result' => $finalResult]);
            }

        return response()->json(['message' => 'Final result update completed.']);
    }
    

    public function finalDataScrapingPhysics()
    {
        // Fetch all roll_no values from the 'bangla' table
      
        $students = DB::table('physics_data')->select('roll_no')->get();

        foreach ($students as $student) {
            $roll = $student->roll_no;

            // Send POST request to external site
            $response = Http::timeout(60)->asForm()->post('http://ntrca.teletalk.com.bd/result/index.php', [
                'rollno'  => $roll,
                'exam'    => '18:18th:2023:3', 
                'yes'     => 'YES',
                'button2' => 'Submit',
            ]);

            $data = $response->body();

            $finalResult = Str::contains($data, 'CONGRATULATIONS') ? 'passed' : 'failed';

            DB::table('physics_data')
                ->where('roll_no', $roll)
                ->update(['final_result' => $finalResult]);
            }

        return response()->json(['message' => 'Final result update completed.']);
    }

    public function finalResultPoliticalScience()
    {
       

        $rollNumbers = [

            
            404050041, 404050064, 404050089, 404050138, 404050166, 404050171, 404050182, 404050209, 404050235,
            404050243, 404050244, 404050438, 404050661, 404050698, 404050889, 404051227, 404051706, 404051707,
            404051722, 404051800, 404051805, 404051842, 404051854, 404051863, 404051873, 404051876, 404051894,
            404051903, 404051910, 404051915, 404051940, 404051942, 404052077, 404052078, 404052089, 404052100,
            404052105, 404052106, 404052120, 404052125, 404052132, 404052137, 404052151, 404052153, 404052159,
            404052162, 404052169, 404052172, 404052182, 404052193, 404052196, 404052244, 404052253, 404052269,
            404052274, 404052278, 404052291, 404052297, 404052321, 404052379, 404052410, 404052424, 404052434,
            404052445, 404052478, 404052493, 404052505, 404052531, 404052583, 404052612, 404052633, 404052634,
            404052641, 404052645, 404052648, 404052659, 404052802, 404052849, 404052950, 404052963, 404052965,
            404052966, 404052975, 404052978, 404052983, 404052996, 404053005, 404053041, 404053067, 404053081,
            404053094
        ];
        

        foreach ($rollNumbers as $roll) {
            try {
                $response = Http::timeout(60)->asForm()->post('http://ntrca.teletalk.com.bd/result/index.php', [
                    'rollno'  => $roll,
                    'exam'    => '18:18th:2023:3',
                    'yes'     => 'YES',
                    'button2' => 'Submit',
                ]);

                $data = $response->body();

                // Check for "CONGRATULATIONS"
                if (Str::contains($data, 'CONGRATULATIONS')) {
                    // Extract name using regex
                    preg_match('/Name:\s*(.+?)<br/i', $data, $matches);
                    $name = $matches[1] ?? null;
    
                    \Log::info("Saving data for Roll: $roll, Name: $name");

                    // Save only if name is found
                    if ($name) {
                        DB::table('political_sciences')->updateOrInsert(
                            ['roll_no' => $roll],
                            [
                                'final_result' => 'passed',
                                'name' => trim($name)
                            ]
                        );
                    }
                }

            } catch (\Exception $e) {
                // Optional: log or handle errors for failed requests
                \Log::error("Failed for roll: $roll, Error: " . $e->getMessage());
            }
        }

        return 'Data scraping completed!';
    }




    public function data_scraping17()
    {

        $rollNumbers  = [
            401010330, 401011105, 401020753, 401021173, 401023565, 401024805, 401023448, 401023487, 401024701, 401011167,
            401021055, 401023486, 401023490, 401023533, 401024860, 401021156, 401000310, 401011093, 401019892, 401020871,
            401021149, 401023494, 401000503, 401000980, 401009738, 401020859, 401021175, 401023468, 401023532, 401023612,
            401006475, 401011250, 401019295, 401020733, 401020781, 401021014, 401023492, 401024699, 401024714, 401000478,
            401000523, 401003266, 401005978, 401007131, 401013186, 401020776, 401020889, 401020996, 401021073, 401021327,
            401024733, 401000675, 401001122, 401006942, 401020788, 401020988, 401021157, 401022443, 401023450, 401023495,
            401023562, 401023589, 401024662, 401024675, 401024721, 401024732, 401000606, 401000952, 401000965, 401001004,
            401005971, 401014367, 401018999, 401019225, 401020759, 401020830, 401020838, 401020856, 401020896, 401021286,
            401022251, 401023541, 401023542, 401024668, 401024672, 401024793, 401025800, 401028580, 401000417, 401000595,
            401000616, 401006442, 401008566, 401009853, 401011094, 401011260, 401020886, 401021052, 401021111, 401021385,
            401022260, 401023535, 401023539, 401023545, 401024667, 401024828, 401024854, 401028513, 401000226, 401000475,
            401000977, 401002792, 401006041, 401006810, 401008601, 401008687, 401009098, 401011283, 401013070, 401016729,
            401016770, 401018189, 401018402, 401020900, 401020905, 401020911, 401021015, 401021082, 401021190, 401021372,
            401022470, 401024713, 401024727, 401026865, 401000535, 401002953, 401003300, 401003617, 401004002, 401004044,
            401006022, 401007185, 401007337, 401008802, 401011218, 401013257, 401013573, 401014027, 401014211, 401014237,
            401014504, 401015068, 401015499, 401016523, 401017282, 401017727, 401018807, 401020778, 401021158, 401021167,
            401021209, 401021246, 401022270, 401022284, 401022377, 401023461, 401024298, 401024734, 401024820, 401025172,
            401025817, 401026336, 401028462, 401000613, 401000632, 401000669, 401001181, 401003099, 401003463, 401004413,
            401004527, 401005796, 401006545, 401006828, 401007162, 401008623, 401008776, 401011760, 401013918, 401014152,
            401015902, 401016472, 401020764, 401020868, 401020920, 401020966, 401020972, 401021308, 401022259, 401023459,
            401023536, 401023584, 401024729, 401026408, 401000043, 401000468, 401000547, 401000551, 401000668, 401001139,
            401002137, 401003189, 401003464, 401004173, 401004363, 401004414, 401006936, 401007231, 401007605, 401008563,
            401008576, 401008598, 401009726, 401010557, 401010700, 401011206, 401011255, 401011294, 401011699, 401011803,
            401013796, 401014018, 401014041, 401014139, 401014358, 401014410, 401014674, 401015120, 401015223, 401015447,
            401017434, 401017661, 401017910, 401018730, 401018735, 401018826, 401020715, 401021116, 401021185, 401021329,
            401021738, 401022414, 401023207, 401024422, 401026849
        ];
        


    


        foreach ($rollNumbers as $roll) {
            
            // Send POST request
            $response = Http::timeout(60)->asForm()->post('http://ntrca.teletalk.com.bd/result/index.php', [
                'rollno'  => $roll,
                'exam'    => '17:17th:2020:3',
                'yes'     => 'YES',
                'button2' => 'Submit',
            ]);

            // Get the response body
            $data = $response->body();

            // Store only if it contains 'CONGRATULATIONS'
            if (Str::contains($data, 'CONGRATULATIONS')) {
                ScrapedData::updateOrCreate(
                    ['roll_no' => $roll], // Prevent duplicate entries
                    ['core_data' => $data]
                );
            }
        }

        return 'Data scraping completed!';
    }



    public function data_scrapingBotany()
    {

        $rollNumbers  = [
            461000019, 461000027, 461000029, 461000030, 461000036, 461000047, 461000049, 461000063, 461000065,
            461000091, 461000095, 461000097, 461000104, 461000143, 461000152, 461000155, 461000164, 461000166,
            461000172, 461000182, 461000203, 461000207, 461000218, 461000223, 461000232, 461000255, 461000259,
            461000267, 461000282, 461000285, 461000306, 461000308, 461000315, 461000317, 461000322, 461000326,
            461000328, 461000330, 461000335, 461000337, 461000353, 461000358, 461000366, 461000392, 461000399,
            461000403, 461000411, 461000416, 461000430, 461000437, 461000445, 461000446, 461000449, 461000451,
            461000454, 461000455, 461000456, 461000459, 461000467, 461000471, 461000491, 461000494, 461000510,
            461000530, 461000541, 461000544, 461000553, 461000590, 461000594, 461000596, 461000661, 461000708,
            461000719, 461000738, 461000746, 461000754, 461000783, 461000793, 461000815, 461000823, 461000835,
            461000847, 461000848, 461000850, 461000859, 461000885, 461000913, 461000944, 461000951, 461000959,
            461000971, 461001022, 461001039, 461001084, 461001092, 461001207, 461001269, 461001273, 461001280,
            461001281, 461001283, 461001298, 461001305, 461001313, 461001333, 461001334, 461001337, 461001345,
            461001346, 461001351, 461001360, 461001361, 461001372, 461001374, 461001386, 461001387, 461001389,
            461001391, 461001392, 461001397, 461001400, 461001406, 461001411, 461001414, 461001419, 461001428,
            461001430, 461001443, 461001451, 461001459, 461001460, 461001471, 461001472, 461001475, 461001497,
            461001538, 461001557, 461001562, 461001570, 461001574, 461001576, 461001579, 461001586, 461001592,
            461001597, 461001601, 461001629, 461001636, 461001661, 461001669, 461001675, 461001696, 461001722,
            461001744, 461001750, 461001751, 461001752, 461001763, 461001767, 461001768, 461001774, 461001784,
            461001792, 461001793, 461001798, 461001800, 461001801, 461001811, 461001812, 461001815, 461001818,
            461001819, 461001825, 461001849, 461001850, 461001859, 461001861, 461001873, 461001879, 461001880,
            461001885, 461001893, 461001913, 461001918, 461001920, 461001924, 461001931, 461001939, 461001949,
            461001953, 461001960, 461001966, 461001971, 461001979, 461001981, 461001985, 461001989, 461001990,
            461002008, 461002015, 461002018, 461002035, 461002042, 461002081, 461002105, 461002117, 461002125,
            461002136, 461002152, 461002166, 461002179, 461002240, 461002248, 461002250, 461002273, 461002278,
            461002284, 461002295, 461002298, 461002311, 461002325, 461002331, 461002353, 461002354, 461002367,
            461002376, 461002393, 461002397, 461002411, 461002416, 461002426, 461002441, 461002445, 461002452,
            461002453, 461002455, 461002457, 461002461, 461002465, 461002507, 461002517, 461002521, 461002534,
            461002540, 461002542, 461002564, 461002568, 461002574, 461002577, 461002579, 461002586, 461002590,
            461002596, 461002597, 461002616, 461002621, 461002626, 461002643, 461002658, 461002667, 461002673,
            461002675, 461002680, 461002689, 461002693, 461002711, 461002714, 461002717, 461002733, 461002740,
            461002744, 461002748, 461002756, 461002775, 461002789, 461002804, 461002819, 461002824, 461002825,
            461002830, 461002831, 461002860, 461002875, 461002878, 461002880, 461002881, 461002910, 461002930,
            461002934, 461002948, 461002959, 461002981, 461002988, 461003042, 461003044, 461003059, 461003080,
            461003125, 461003126, 461003135, 461003168, 461003173, 461003186, 461003189, 461003192, 461003206,
            461003207, 461003214, 461003215, 461003222, 461003231, 461003234, 461003236, 461003243, 461003249,
            461003250, 461003257, 461003259, 461003260, 461003276, 462000010, 462000024, 462000027, 462000081,
            462000094, 462000099, 462000101, 462000108, 462000128, 462000142, 462000146, 462000147, 462000156,
            462000183, 462000187, 462000196, 462000208, 462000218, 462000219, 462000246, 462000249, 462000267,
            462000280, 462000293, 462000310, 462000311, 462000327, 462000328, 462000329, 462000336, 462000342,
            462000367, 462000384, 462000388, 462000389, 462000391, 462000402, 462000414, 462000436, 462000442,
            462000459, 462000484, 462000493, 462000500, 462000503, 462000519, 462000522, 462000536, 462000568,
            462000596, 462000599, 462000603, 462000607, 462000609, 462000617, 462000644, 462000645, 462000648,
            462000655, 462000664, 462000702, 462000717, 462000721, 462000725, 462000726, 462000748, 462000753,
            462000760, 462000771, 462000793, 462000795, 462000796, 462000843, 462000847, 462000854, 462000896,
            462000927, 462000933, 462000938, 462000940, 462000944, 462000963, 462000976, 462000979, 462000989,
            462001033, 462001049, 462001058, 462001059, 462001063, 462001066, 462001085, 462001091, 462001094,
            462001095, 462001101, 462001102, 462001134, 462001146, 462001150, 462001151, 462001152, 462001153,
            462001157, 462001162, 462001164, 462001172, 462001177, 462001181, 462001182, 462001184, 462001186,
            462001192, 462001212, 462001224, 462001237, 462001246, 462001257, 462001258, 462001263, 462001266,
            462001269, 462001282, 462001298, 462001336, 462001340, 462001345, 462001358, 462001373, 462001411,
            462001416, 462001422, 462001429, 462001433, 462001444, 462001505, 462001535, 462001558, 462001563,
            462001578, 462001582, 462001586, 462001590, 462001597, 462001616, 462001633, 462001656, 462001667,
            462001671, 462001682, 462001691, 462001692, 462001708, 462001718, 462001720, 462001722, 462001723,
            462001747, 462001749, 462001751, 462001753, 462001754, 462001765, 462001770, 462001780, 462001786,
            462001791, 462001792, 462001795, 462001796, 462001801, 462001802, 462001803, 462001805, 462001808,
            462001816, 462001821, 462001824, 462001839, 462001844, 462001845, 462001849, 462001855, 462001859,
            462001866, 462001868, 462001869, 462001872, 462001874, 462001887, 462001895, 462001918, 462001924,
            462001926, 462001930, 462001932, 462001950, 462001952, 462001967, 462001971, 462001976, 462001977,
            462001980, 462001985, 462001986, 462001994, 462002004, 462002009, 462002012, 462002016, 462002032,
            462002042, 462002044, 462002045, 462002049, 462002052, 462002053, 462002060, 462002062, 462002073,
            462002074, 462002085, 462002086, 462002142, 462002144, 462002161, 462002165, 462002166, 462002168,
            462002204, 462002206, 462002230, 462002231, 462002239, 462002259, 462002262, 462002267, 462002287,
            462002289, 462002296, 462002306, 462002311, 462002312, 462002327, 462002329, 462002338, 462002352,
            462002355, 462002356, 462002358, 462002359, 462002360, 462002365, 462002369, 462002375, 462002376,
            462002380, 462002388, 462002389, 462002391, 462002396, 462002398, 462002405, 462002406, 462002408,
            462002411, 462002413, 462002419, 462002429, 462002432, 462002435, 462002436, 462002441, 462002443,
            462002459, 462002460, 462002461, 462002469, 462002487, 462002491, 462002502, 462002506, 462002508,
            462002514, 462002523, 462002524, 462002525, 462002547, 462002585, 462002594, 462002597, 462002599,
            462002603, 462002606, 462002607, 462002627, 462002630, 462002638, 462002640, 462002672, 462002695,
            462002699, 462002705, 462002715, 462002716, 462002728, 462002730, 462002734, 462002741, 462002748,
            462002760, 462002766, 462002768, 462002769, 462002770, 462002771, 462002772, 462002773, 462002776,
            462002778, 462002780, 462002781, 462002782, 462002787, 462002788, 462002789, 462002793, 462002798,
            462002799, 462002800, 462002802, 462002812, 462002822, 462002823, 462002824, 462002826, 462002837,
            462002846, 462002848, 462002858, 462002863, 462002866, 462002867, 462002868, 462002877, 462002903,
            462002911, 462002922, 462002923, 462002927, 462002930, 462002936, 462002958, 462002967, 462002973,
            462002984, 462003026, 462003029, 462003079, 462003084, 462003094, 462003102, 462003122, 462003128,
            462003138, 462003171, 462003182, 462003183, 462003201, 462003205, 462003227, 462003247, 462003254,
            462003259, 462003265, 462003307, 462003320, 462003336, 462003337, 463000004, 463000013, 463000018,
            463000019, 463000020, 463000051, 463000071, 463000084, 463000134, 463000139, 463000149, 463000157,
            463000168, 463000172, 463000190, 463000200, 463000204, 463000240, 463000253, 463000269, 463000271,
            463000295

        ];
    
        //dd(count($rollNumbers));

         foreach ($rollNumbers as $roll) {
            
            // Send POST request
            $response = Http::timeout(60)->asForm()->post('http://ntrca.teletalk.com.bd/result/index.php', [
                'rollno'  => $roll,
                'exam'    => '18:18th:2023:3',
                'yes'     => 'YES',
                'button2' => 'Submit',
            ]);

            // Get the response body
            $data = $response->body();

            // Store only if it contains 'CONGRATULATIONS'
            if (Str::contains($data, 'CONGRATULATIONS')) {
                DemonstratorResult::updateOrCreate(
                    ['roll_no' => $roll], // Prevent duplicate entries
                    ['core_data' => $data]
                );
            }
        }

        return 'Data scraping completed!';
    }
    
}
